spring.application.name=checkout-service
server.port=8081
spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.serviceId=config-service

spring.config.import=optional:configserver:
eureka.instance.hostname=localhost
loadbalancer.cliente.name=products-service

management.endpoints.web.exposure.include= health,info,circuitbreakers, circuitbreakerevents
management.health.circuitbreakers.enabled = true
management.endpoint.health.show-details=always


#linea comentada para usar random

spring.cloud.loadbalancer.configurations=weighted
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://localhost:8080/realms/dh

resilience4j.circuitbreaker.instances.product.allowHealthIndicatorToFail: false
resilience4j.circuitbreaker.instances.product.registerHealthIndicator: true

#confifuracion propia del patron  circuit breaker, propiedades del algoritmo q define un cambio de estado al otro

resilience4j.circuitbreaker.instances.product.slidingWindowType=COUNT_BASED 
resilience4j.circuitbreaker.instances.product.slidingWindowSize = 5
resilience4j.circuitbreaker.instances.product.failureRateThreshold= 50

# las siguientes tiene mas que ver cuando el circuit breaker esta semoabierto o obierto, es decir cuando esta bloqueada la comunicacion
resilience4j.circuitbreaker.instances.product.waitDurationInOpenState = 15000
resilience4j.circuitbreaker.instances.product.permittedNumberOfCallsInHalfOpenState =3
resilience4j.circuitbreaker.instances.product.automaticTransitionFromOpenToHalfOpenEnabled = true

# abajo, configuracion del mecanismo de reintentos
resilience4j.circuitbreaker.instances.product.maxAttempts = 3
resilience4j.circuitbreaker.instances.product.waitDuration = 500
resilience4j.circuitbreaker.instances.product.retryExceptions[0]=feign.FeignException$InternalServerError

management.tracing.sampling.probability= 1.0
#logging.file.name=../checkout-service.log
logging.file.name=./logs/checkout-service.log
